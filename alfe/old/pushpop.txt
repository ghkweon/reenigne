// Adjust before after
//        [sp]   [sp+adj]    contains the last value pushed - the return address
//        [sp+4] [sp+adj+4]  contains the (first word of the) first argument
//        [sp-4] [sp+adj-4]  contains the (first word of the) first variable
// Need an algorithm to compute offsets of parameters and arguments and the stack adjustment
//   Treat parameters as an object, round up to stack alignment (4 bytes for 32-bit)
//     Need an algorithm to compute offsets for an object

// sp increasing ^
//   last incoming argument word
//   ...
//   first incoming argument word
//   return address
//   [optional alignment word]
//   last variable word
//   ...
//   first variable word
//   [optional alignment word]
//   last outgoing argument word
//   ...
//   first outgoing argument word
//   [optional alignment word]
//   return address


To implement PUSH/POP (initial):
  Don't reserve frame space for outgoing arguments
  Functions pop their arguments
  Don't need to allocate temporaries explicitly
  Epilogue needs to change stack from (return value, return address, parameters) to (return address, return value) before returning
  At most 1 argument in each stack slot
  May have smaller code in some cases
  When writing functions directly in intermediate language (for run time code generation) write them in this style and they are optimized by the compiler
  Align stack as required (in prologue if there is a variable with alignment requirements, or when pushing arguments)

To implement non-PUSH/POP (optimized):
  Reserve frame space for outgoing arguments
  Functions do not pop their arguments
  Need to create extra variables for temporaries
  Above outgoing arguments reserve space for the function to place its return value
  Arguments laid out as in a class
  Probably faster in general on modern machines
  Probably won't write code like this directly - only compiler-generated
  Calling function has the responsibility of aligning the stack (it can do so in the prologue, or pass the responsibility on to its callers)

Can these styles interact in a single function?
  If we PUSH something under the outgoing arguments area (storing a
   temporary variable across a function call), then we need to PUSH the
   arguments too.

