Previously I had considered allowing the compiler to try to convert from type
A to type B with as many intermediate conversions as necessary, so that types
don't have to implement conversion to/from all the types that they can be
converted from/to. The compiler would be able to compute a cost for each
conversion path and pick the cheapest one.

However, this is difficult for the compiler (requires dynamic programming)
and therefore unpredictable for the programmer.

The main reason to have it was so that one could write, e.g.
  Int b = 255;
The type of 255 would be "UInt8" and the conversion chain would be
  UInt8->Int16->Int32
However, that would not let us do things like:
  UInt8 = 511 - 256;
Since the types of 511 and 256 would be Int16 and therefore the type of
511 - 256 would be Int16.

So instead we want to make the types of integer constants all Integer and
allow implicit conversion from Integer to (e.g.) UInt8 provided the compiler
can prove that the value is within range.

So rather than converting from a Type to a Type, we convert from an Expression
to a Type. An Expression can carry around more compile-time information than
just a Type.

Then for converting from type A to type B, we only need to look at those two
types, and we don't need to hoist around a TypeConverter object.

The type of { foo: x, bar: y, baz: { 1, 2 } } is StructuredType{"foo":TypeOf(x),"bar":TypeOf(y),"baz":StructuredType{InitializerList{"0":Int,"1":Int}}}
  No, ALFE Class types don't directly participate in the type.h StructuredType system - they're atomic as far as it is concerned.
  The argument types in StructuredType are not normal template arguments
    StructuredType uses names() and members() methods.
    Tyco uses isInstantiation(), generatingTemplate() and templateArgument() methods.


Conversion from one structured type to another:
  Works like named arguments in a function call
  First take all named members in the RHS and assign them to the corresponding named members in the LHS. If a member doesn't exist, fail conversion.
  Then take all unnamed arguments in the RHS and in LTR order and assign them to unassigned members in the LHS, again in LTR order.
  If there are too many or too few members, fail.

Have helper methods in StructuredType to make this easier:
  StructuredType canConvertFrom(StructedType other)
  Value convertFrom(StructuredType other, Value value)


In general, there is an automatic conversion from type A to type B if all of A's values are also in B
  Conversion loses no information (other the fact that the value was originally of type A)
  Liskov substitution
  Examples:
    A = UInt8, B = SInt32
    A = Integer, B = Rational
    A = derived, B = base
    A = X, B = X | Y

What is the relationship between Integer and Rational, and how would such a relationship be described in code?
  Possibiltiy 1: Integer derives from Rational
    However, then Integer's denominator would waste memory (even if the compiler could always optimize this away, there would be an issue with const-pointer-to-Integer)
  Possibility 2: Rational has an implicit (converting) constructor from Integer
    This is better, but perhaps we should specify that this constructor can't throw?
    https://en.wikipedia.org/wiki/Subtyping
      specifically, see the section on Coercions

What does this mean for our function overload resolution
  We need a mechanism like tryConvert() which just works with types (canConvertTo()?)

Different types of conversions:
  Coercion (automatic, no information lost - same values inhabit different types)
  Saturation
  Truncation
  Float (i.e. conversion of Double to Float - saturates at +/- infinity, truncates least significant figures)
  Base-to-derived

If A <: B and B <: A then A and B represent the same ethereal type (in that either can be used where the other is expected) but (generally) different representations
  e.g. date as day/month/year vs. days since epoch
  Or complex number as cartesian and polar
    Not the greatest example since the conversion is lossy, unless we assume a lossless real type
  So the ethereal types form an equivalent class over the actual types


Given two types A and B, how do we determine if A <: B and/or B <: A?
  For each type, keep track of all subtypes and supertypes
  Whenever a type is added, we go through all the types that convert to/from it
  What about Either?
    Given any types A and B, we can convert values of type A to type A|B
      Is Either a disjoint union or a non-disjoint union?
        I think it should be non-disjoint since disjoint can be implemented in terms of non-disjoint: (A,Class{})|(B,Class{})
        "If it matters, you're doing it wrong"
      So, any type has an infinite number of supertypes
        So we have to treat the Either subtype relationship differently
          A <: (X | Y)  <=>  (A <: X) or (A <: Y)
          (A | B) <: X  <=>  (A <: X) and (B <: X)
    We have potential problems with templates in general. Consider "A<@B,@C> = Class : B { construct(C c) { } };" - converts any C to any B
      This should be disallowed, at least for A not explicitly instantiated
        conversion from Bottom should be a compile error
        If the set of available conversions depends on which templates we have instantiated, we have a chicken-and-egg problem
          The set of instantiations will in general depend on the conversion routines actually chosen
      On the other hand, there may be situations when we want to instantiate a not-previously-instantiated template in order to do a conversion





Rejected:

class Conversion : public ConstHandle
{
public:
    class Body : public ConstHandle::Body
    {
    public:
        virtual Value convert(const Value& value) const = 0;
    };
    Conversion() { }
    explicit Conversion(Body* body) : ConstHandle(body) { }
    Value operator()(const Value& value) const
    {
        return body()->convert(value);
    }
    const Body* body() const { return as<Body>(); }
};

class TypeConverter;

class ConversionSource : public ConstHandle
{
public:
    class Body : public Handle::Body
    {
    public:
        virtual Conversion conversion(const Type& from, const Type& to,
            TypeConverter* typeConverter) const = 0;
    };
    ConversionSource() { }
    ConversionSource(Body* body) : ConstHandle(body) { }
    Conversion conversion(const Type& from, const Type& to,
        TypeConverter* typeConverter) const
    {
        return body()->conversion(from, to, typeConverter);
    }
    const Body* body() const { return as<Body>(); }
};

class TypeConverter
{
public:
    void addConversionSource(const Template& templateTyco,
        const ConversionSource& conversionSource)
    {
        _conversionSources.add(templateTyco, conversionSource);
    }
    void addConversion(const Type& from, const Type& to,
        const Conversion& conversion)
    {
        _conversions.add(TypePair(from, to), conversion);
    }
    Conversion conversion(const Type& from, const Type& to)
    {
        if (from == to)
            return _trivialConversion;
        TypePair pair(from, to);
        if (_conversions.hasKey(pair))
            return _conversions[pair];
        Tyco tyco = from;
        bool doneBoth = false;
        do {
            while (tyco.isInstantiation()) {
                tyco = tyco.generatingTemplate();
                if (_conversionSources.hasKey(tyco)) {
                    Conversion conversion =
                        _conversionSources[tyco].conversion(from, to, this);
                    if (conversion.valid()) {
                        _conversions.add(pair, conversion);
                        return conversion;
                    }
                }
            }
            if (doneBoth)
                break;
            tyco = to;
            doneBoth = true;
        } while (true);
        StructuredType fromStructure(from);
        StructuredType toStructure(to);
        if (fromStructure.valid() && toStructure.valid() &&
            fromStructure.toString().empty()) {
            Reference<StructuredConversionBody>
                body(new StructuredConversionBody(to));
            const Array<StructuredType::Member> fromMembers =
                fromStructure.members();
            const HashTable<Identifier, int> fromNames = fromStructure.names();
            const Array<StructuredType::Member> toMembers =
                toStructure.members();
            const HashTable<Identifier, int> toNames = toStructure.names();

            int n = toNames.count();
            for (int i = 0; i < n; ++i) {
                StructuredType::Member member = toMembers[i];
                String name = member.name();
                Type toType = member.type();
                String number(decimal(i));
                int fromIndex;
                if (fromNames->hasKey(name)) {
                    fromIndex = fromNames[name];
                    if (fromNames->hasKey(number))
                        return Conversion(
                            new MultipleDefinitionFailure(from, to, i, name));
                }
                else
                    if (fromNames->hasKey(number))
                        fromIndex = fromNames[number];
                    else {
                        return Conversion(
                            new MissingDefinitionFailure(from, to, name));
                    }
                Type fromType = fromMembers[fromIndex].type();
                Conversion c = conversion(fromType, toType);
                if (!c.valid())
                    return Conversion(
                        new MemberConversionFailure(from, to, name, c));
                body->add(name, c);
            }
            Conversion conversion(body);
            _conversions.add(TypePair(from, to), conversion);
            return conversion;
        }
        return Conversion(new ConversionFailureBody(from, to));
    }
    class ConversionFailureBody : public Conversion::Body
    {
    public:
        ConversionFailureBody(const Type& from, const Type& to)
          : _from(from), _to(to) { }
        Value convert(const Value& value) const
        {
            value.span().throwError(toString(value));
            return Value();
        }
        virtual String sub(const Value& value) const { return ""; }
        String toString(const Value& value) const
        {
            String r("No conversion");
            String f = _from.toString();
            if (f != "")
                r += " from type " + f;
            r += " to type " + _to.toString() + " is available";
            String s = sub(value);
            if (s == "")
                r += ".";
            else
                r += ": " + s;
            return r;
        }
        bool valid() const { return false; }
    private:
        Type _from;
        Type _to;
    };
private:
    class TrivialConversionBody : public Conversion::Body
    {
    public:
        Value convert(const Value& value) const { return value; }
    };
    class StructuredConversionBody
      : public Conversion::Body
    {
    public:
        StructuredConversionBody(const Type& type) : _type(type) { }
        void add(const String& name, const Conversion& conversion)
        {
            _conversions[name] = conversion;
        }
        Value convert(const Value& value) const
        {
            auto input = value.value<HashTable<Identifier, Value>>();
            HashTable<Identifier, Value> output;
            for (auto i : input) {
                String name = i.key();
                output[name] = _conversions[name](input[name]);
            }
            return Value(_type, output, value.span());
        }
    private:
        Type _type;
        HashTable<String, Conversion> _conversions;
    };
    class MultipleDefinitionFailure : public ConversionFailureBody
    {
    public:
        MultipleDefinitionFailure(const Type& from, const Type& to, int i,
            const String& name)
          : ConversionFailureBody(from, to), _i(i), _name(name) { }
        String sub(const Value& value) const
        {
            auto input = value.value<HashTable<Identifier, Value>>();
            return "Member " + _name + " defined at " +
                input[_name].span().toString() + " is already defined at " +
                input[decimal(_i)].span().toString() + ".";
        }
    private:
        int _i;
        Identifier _name;
    };
    class MissingDefinitionFailure : public ConversionFailureBody
    {
    public:
        MissingDefinitionFailure(const Type& from, const Type& to,
            const String& name)
          : ConversionFailureBody(from, to), _name(name) { }
        String sub(const Value& value) const
        {
            return "Member " + _name + " is not defined.";
        }
    private:
        String _name;
    };
    class MemberConversionFailure : public ConversionFailureBody
    {
    public:
        MemberConversionFailure(const Type& from, const Type& to,
            const String& name, const Conversion& conversion)
          : ConversionFailureBody(from, to), _name(name),
            _conversion(conversion) { }
        String sub(const Value& value) const
        {
            auto input = value.value<HashTable<Identifier, Value>>();
            ConstReference<ConversionFailureBody> i = _conversion.
                _body.referent<ConversionFailureBody>();
            String r = "For child member " + _name;
            if (i != 0)
                r += ": " + i->toString(input[_name]);
            return r + ".";
        }
    private:
        String _name;
        Conversion _conversion;
    };

    class TypePair
    {
    public:
        TypePair() { }
        TypePair(const Type& from, const Type& to) : _from(from), _to(to) { }
        bool operator==(const TypePair& other) const
        {
            return _from == other._from && _to == other._to;
        }
        UInt32 hash() const
        {
            return Hash(typeid(TypePair)).mixin(_from.hash()).
                mixin(_to.hash());
        }
    private:
        Type _from;
        Type _to;
    };
    HashTable<TypePair, Conversion> _conversions;
    HashTable<Tyco, ConversionSource> _conversionSources;
    static Conversion _trivialConversion;
};

Conversion TypeConverter::_trivialConversion(
    new TypeConverter::TrivialConversionBody);

class ArrayConversionSourceBody : public ConversionSource::Body
{
public:
    virtual Conversion conversion(const Type& from, const Type& to,
        TypeConverter* typeConverter) const
    {
        Tyco toGenerator = to;
        if (toGenerator.isInstantiation())
            toGenerator = toGenerator.generatingTemplate();
        if (toGenerator != Template::array)
            return Conversion(new NotArrayConversionFailure(from, to));
        Type contained = to.templateArgument();

        Tyco fromGenerator = from;
        List<Conversion> conversions;
        int i = 0;
        while (fromGenerator.isInstantiation()) {
            Type argument = fromGenerator.templateArgument();
            Conversion conversion =
                typeConverter->conversion(argument, contained);
            if (!conversion.valid())
                return Conversion(
                    new ElementConversionFailure(from, to, i, conversion));
            conversions.add(conversion);
            fromGenerator = fromGenerator.generatingTemplate();
        }
        if (fromGenerator != Template::tuple)
            return Conversion(new NotTupleConversionFailure(from, to));
        return Conversion(new ArrayConversionBody(
            Type::array(contained), conversions));
    }
private:
    class ArrayConversionBody : public Conversion::Body
    {
    public:
        ArrayConversionBody(const Type& type,
            const List<Conversion>& conversions)
          : _type(type), _conversions(conversions) { }
        Value convert(const TypedValue& value) const
        {
            List<Value> list = value.value<List<Value>>();
            List<Value> results;
            int p = 0;
            for (auto i : list) {
                results.add(_conversions[p](i));
                ++p;
            }
            return Value(_type, results, value.span());
        }
    private:
        Type _type;
        Array<Conversion> _conversions;
    };
    class NotArrayConversionFailure :
        public TypeConverter::ConversionFailureBody
    {
    public:
        NotArrayConversionFailure(const Type& from, const Type& to)
          : ConversionFailureBody(from, to) { }
        String sub(const Value& value) const
        {
            return "Not a conversion to an Array.";
        }
    };
    class NotTupleConversionFailure :
        public TypeConverter::ConversionFailureBody
    {
    public:
        NotTupleConversionFailure(const Type& from, const Type& to)
          : ConversionFailureBody(from, to) { }
        String sub(const Value& value) const
        {
            return "Not a conversion from a Tuple.";
        }
    };
    class ElementConversionFailure :
        public TypeConverter::ConversionFailureBody
    {
    public:
        ElementConversionFailure(const Type& from, const Type& to,
            int i, const Conversion& conversion)
          : ConversionFailureBody(from, to), _i(i),
            _conversion(conversion) { }
        String sub(const Value& value) const
        {
            auto input = value.value<List<Value>>();
            auto iterator = input.begin();
            for (int j = 0; j < _i; ++j)
                ++iterator;
            ConstReference<ConversionFailureBody> i = _conversion.
                _body.referent<ConversionFailureBody>();
            return String("For element ") + _i + ": " + i->toString(*iterator);
        }
    private:
        int _i;
        Conversion _conversion;
    };
};


We want the TypeConverter to be able to create its own Conversions by
 combining the Conversions passed to it. This way, programmers don't have to
 write a Conversion for every possible pair of types that we might want to
 convert between. We can do this with dynamic programming.

Creating a new type might change the Conversion for a pair of types - that's
 ok. Allowing the instantiation of a template to do the same seems
 potentially error prone (but might be more logical).

We need to be careful not to try unbounded conversion paths.
 e.g. if we can convert F<T> to F<F<T>>.


Conversion                  Conversion::Body
                              TypeConverter::ConversionFailureBody
                                TypeConverter::MultipleDefinitionFailure
                                TypeConverter::MissingDefinitionFailure
                                TypeConverter::MemberConversionFailure
                                ArrayConversionSourceBody::NotArrayConversionFailure
                                ArrayConversionSourceBody::NotTupleConversionFailure
                                ArrayConversionSourceBody::ElementConversionFailure
                              TypeConverter::TrivialConversionBody
                              TypeConverter::StructuredConversionBody
                              ArrayConversionSourceBody::ArrayConversionBody

TypeConverter::TypePair

ConversionSource            ConversionSource::Body
                              ArrayConversionSourceBody

TypeConverter





Removed from ConfigFile:

    void addType(Type type)
    {
        if (_typeSet.has(type))
            return;
        _typeSet.add(type);
        String name = type.toString();
        _types.add(name, type);
        EnumerationType t(type);
        if (t.valid()) {
            const Array<EnumerationType::Value>* values = t.values();
            for (int i = 0; i < values->count(); ++i) {
                EnumerationType::Value value = (*values)[i];
                _enumeratedValues.add(value.name(),
                    Value(type, value.value()));
            }
            return;
        }
        StructuredType s(type);
        if (s.valid()) {
            const Array<StructuredType::Member> members = s.members();
            for (int i = 0; i < members.count(); ++i)
                addType(members[i].type());
        }
    }

