LowerCaseLetter = 'a'..'z';

UpperCaseLetter = 'A'..'Z';

Letter = LowerCaseLetter | UpperCaseLetter;

DecimalDigit = '0'..'9';

HexadecimalDigit = Digit | 'A'..'F' | 'a'..'f';

AlphabeticCharacter = Letter | '_';

AlphanumericCharacter = AlphabeticCharacter | DecimalDigit;

UnicodeSequence = 'U+' HexadecimalDigit HexadecimalDigit HexadecimalDigit HexadecimalDigit [HexadecimalDigit [HexadecimalDigit]];

EscapedCharacter = '\\' ('\\' | '\'' | '\`' | '\"' | '$' | 'n' | 't' | UnicodeSequence);

NewLineCharacter = {'\n' | '\r'};

NonStringCharacter = NewLineCharacter | '\\';

NonNewLineCharacter = Character-NewLine;


NewLine = {'\n\r' | '\r\n' | NewLineCharacter};

SingleLineComment = '//' NonNewLineCharacter*;

MultipleLineComment = '/*' (Comment | !'*/' Character)* '*/';

Comment = SingleLineComment | MultipleLineComment;

Space = {(' ' | NewLine | Comment)+};

_ = {!AlphanumericCharacter [Space]};


Identifier = LowerCaseLetter AlphanumericCharacter* {[Space]};

DecimalNumber = DecimalDigit+ {[Space]};

DoubleQuotedString = '"' ('$' (Identifier | '(' [Expression] ')') | !(NonStringCharacter | '"') | EscapedCharacter)* '"' {[Space]};

EmbeddedLiteral = `###` end=(NonNewLineCharacter*) NewLine (!end Character)* end `###` {[Space]};

Expression =
    ("+" | "-" | "~" | "!" | "*" | "&")* (
      ( DecimalNumber
      | DoubleQuotedString
      | EmbeddedLiteral
      | Identifier
      | `true`
      | `false`
      | `null`
      | "(" Expression ")"
      | "{" [Expression / ","] "}"
      )
      (
        "(" [Expression / ","] ")"
      | "[" Expression "]"
      | "." Identifier
      )*
    )
  / "^"
  \ ("*" | "/" | "%")
  \ ("+" | "-")
  \ ("<<" | ">>")
  \ ("<" | ">" | "<=" | ">=")
  \ ("==" | "!=")
  \ "&"
  \ "~"
  \ "|"
  \ "&&"
  \ "||";


TycoIdentifier = UpperCaseLetter AlphanumericCharacter* {[Space]};

TycoParameter = ["@"] TycoSignifier

TycoSpecifier =
    TycoParameter
  | TycoSpecifier "*"
  | TycoSpecifier "(" [(TycoSpecifier [Identifier]) / ","] ")"
  | "Class" "{" ClassDefinition "}"
  | "TypeOf" "(" Expression ")"
  | TycoSpecifier "." TycoParameter
  | DecimalNumber
  | TycoSpecifier "->" TycoSpecifier
  | TycoSpecifier "|" TycoSpecifier
  | TycoSpecifier "?"
  | "(" [TycoSpecifier / ","] ")"
  | TycoSpecifier "[" TycoSpecifier "]"
  | TycoSpecifier "-" TycoSpecifier
  ;

TemplateParameters = ("<" [TycoSpecifier | TemplateParameters] \ "," ["..."] ">")*;

TycoSignifier = TycoIdentifier TemplateParameters;

ConditionedStatement = "(" Expression ")" Statement;

Statement =
    Expression ";"
  | TycoSpecifier Identifier TemplateParameters "(" [(TycoSpecifier Identifier) / ","] ")" (Statement | `from` Expression ";")
  | TycoSpecifier Identifier "=" Expression ";"
  | "{" Statement* "}"
  | TycoSignifier = TycoSpecifier ";"
  | `nothing` ";"
  | ("++" | "--") Expression ";"
  | (`if` | `unless`) ConditionedStatement ((`elseIf` | `elseUnless`) ConditionedStatement)* [`else` Statement]
  | `switch` "(" Expression ")" "{" ((`case` Expression \ "," | `default`) ":" Statement)* "}"
  | `return` Expression ";"
  | `include` Expression ";"
  | `break`* (`break` | `continue`) ";"
  | `forever` Statement ";"
  | [`do` Statement] (`while" | `until`) ConditionedStatement [`done` Statement]
  | `for` "(" [Statement] ";" [Expression] ";" [Statement] ")" Statement [`done` Statement]
  | [Expression ("=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "|=" | "~=" | "^=")] Expression ";"
  ;

= Statement*;

