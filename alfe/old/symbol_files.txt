  When converting Symbol to string, we want to be able to see which symbol is referenced
  Also want to be able to restore a Symbol tree from a string, including all label references
    What about SymbolCache stuff? It would be useful to be able to restore that too
Uses of text input/output:
  External programs interfacing with parts of the compiler off-line
    Source preprocessor for making testcases
  Debugging
    Want to be able to emit entire compiler state
  Formats:
    Input: normal source file with dependencies
    Output: list of source files accessed in compilation
    Both: unparsed and parsed source code with any combination of "include"s, "emit"s, "from"s and constants evaluated and substituted
    Both: stack-based code
All Symbols must be owned by some root or they will be reference counted
  They might be owned by a HashTable in a Cache belonging to a TycoDefinitionStatement
  We need to enumerate them all when dumping
    For ALFE, we need to have some kind of reflection so that this logic doesn't need to be in all of the Symbol classes
      Classes need to opt in to run-time reflection (this makes no code differences, it just makes the debug information available at run-time)

  SymbolLabel is mutable (so we can refer to it in other symbols and then fill in the target detail later)
    SymbolLabel::Body corresponds to what we used to use integers for.
  When inputting from a string:
    Keep a hash table from int to Symbol::Body
    How do we represent SymbolLabel identity?
      Don't bother and just make a new SymbolLabel for each instance?
    What are the uses of labels?
      Resolving identifers to parameters, variable definitions and function definitions
      Resolving type constructor identifiers to type constructor definition statements
      Resolving template type specifiers to template class instantiations
      Resolving stack machine labels to basic block labels
        In each of these cases, both the label and its target have a canonical identity
          Should we expand the concept of canonical identity?
          Should we make Symbols mutable and do away with the Cache and SymbolLabel concepts altogether?
            If we have Symbols s and t, it would be nice to be able to say:
              s[2] = SymbolLabel(t)
          You can pass Symbols around cheaply (because they are just handles to the canonical identities)
          Modifying a Symbol modifies the canonical identities
          Creating a Symbol creates a new canonical identity
          In theory, could have Symbol.duplicate() which creates a new canonical identity as a copy of an old one, but haven't had a use for this yet.
          This is rather like reference semantics in C# and Java.

