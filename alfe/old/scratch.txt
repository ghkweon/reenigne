Instead of modifying a label's target, we now modify the Symbol directly.
  So, when we add a basic block, need to update the follows label in the preceeding block
  Add a basicBlockLabel element to functionDefinitionStatement

For compiling assembly-like things, where there may be multiple labels pointing forwards, want to be able to:
  Create a label pointing to an unknown block
  Later, when the block is created, fill in the label
  Have all the references to that label updated
  => Make SymbolLabel mutable as well as Symbol.

Allow SymbolLabel on runtime stack

Implement generic types:
  Figure out exactly which atoms we want to have. Currently:
    atomTycoIdentifier
    atomTemplateTycoSpecifier
    atomTycoSignifier
    atomTemplateParameter
    atomTypeKind
    atomTemplateKind
    atomTycoDefinitionStatement

  Resolve TycoIdentifiers to TycoDefinitionStatements instead of resolving TypeIdentifiers to TypeAliasStatements
  Resolve template TypeSpecifiers to instantiated Type
  For each template TycoDefinitionStatement that is a Class, need to keep a table of instantiations:
    * Function that, when given a TycoDefinitionStatement and a list of argument TycoDefinitionStatements, returns the resulting Type from the table
      Need to check to see if it matches a specialization
        Pick the most specific specialization that matches.
          How to rank specializations?
            Need to determine if one specialization is a sub-specialization of another
  Need a function to determine the Kind of a TycoDefinitionStatement
    * Given a TycoDefinitionStatement, returns an atomTypeKind or atomTemplateKind Symbol.
  When using a Tyco, need to check it's Kind to make sure it's what we expect
    * Only a Type can be used in a parameter/variable declaration, as the referent of a pointer Type or an argument or return value of a function Type.
      * This is because Generic Tycos have no values associated with them.

Implement evaluate()
  Force compilation of any functions called
  Need Program* argument and RuntimeStack* argument?
    Combine these into VirtualMachine?
  Limit number of steps per evaluate() call when compiling (don't bother when interpreting)

Make include statement work
  compileStatement: atomIncludeStatement
  Problem: the include statement could change the meaning of the expression in its argument, if (for example) it redefined a function that was called to construct the argument.
  Solution: to evaluate the expression, pretend that the included file is empty and evaluate the filename on that assumption.
  Putting an include statement in an if statement isn't terribly useful, because it will only affect the inner scope.
    To get the effect of a conditional include, make 'include ""' a no-op. Then we can 'include a ? "foo" : ""'.
  Included files should be able to include their dependencies without being concerned about multiple inclusion
    => Include should be idempotent
  But if a function uses some include that pollutes the namespace, it should just be able to include locally without affecting anywhere else
    => idempotency needs to be per-scope
      But if the file has been included in an outer scope, re-including it in an inner scope should be a no-op (for performance if nothing else)

How to do compile-time expression evaluation for include
  These expressions (and the functions they call) can't depend on any outside state
    But they will in general need to (e.g.) allocate memory, which will involve setting up heap state
      Will need a mechanism to allow programs to set up state for compile-time evaluated expressions
        Set this up on first call to evaluate()
      Is it always the same? Might we need faciliites other than memory? Shouldn't do I think...

Implement construction expressions

Make compiler look for functions to resolve missing overloads
Allow implicit type conversions
  Need to know about all the overloads, the types of the arguments, the available conversion functions and their costs
Algorithm for resolving names in the presence of overloading
  Make a list of all the targets with matching names and potential number of arguments
  Choose the one which fits best.
  Use dynamic programming to figure out a "cost" associated with converting any type to any other type
    Allow conversion operators to specify a cost?

Add classes
  Implement resolveSize
  Call resolveSize
  Class contents:
    public/private/protected
    friend declaration
    member variable
    method definition
    include
      Or have a 'Class X from y' form instead?

Implement switch:
  compileStatement: atomSwitchStatement
  More detail in switch type mismatch error
  Allow overloads over operator== for switch comparison

Implement closures/inner functions/lambdas:
  At least initially, disallow usage of the closure outside of the scope of the variables it uses
    If it turns out to be useful, make scopes heap allocated and reference counted (when necessary) and allow them to persist outside the enclosing scope
  How does static chain pointer work?
    Might return multiple closures referencing the same environment
      => closure is "fat pointer" with pointers to environment object and method
    http://www.hokstad.com/how-to-implement-closures.html
  Allow inner functions to return return, break and continue
    Need unwinding to remove intermediate frames
    Can a function that accepts a closure specify that the closure must not throw?
      Can the function catch these pseudo-exceptions? My intuition says no.

Implement template functions

Add Int32, UInt32 and NInt32 types
Add 8-bit and 16-bit types
Add 64-bit types
Add behaviors for types Bit, Byte, Character, Word, UInt
Add hexadecimal constants
Add character literals
Add array/structure literals #{1,2,3}
Add truncateCast
Add operator  2 .                 LtR
  Argument dependent lookup: need to pass a TypeList to resolveTypes() so that we can figure out which function overload is being called?
Add operator  2 ->                LtR
Add operator  2 []                LtR  LValue
  The return value of [] needs to be dereferenced to obtain an LValue or RValue.
Add operator  4 sizeof            RtL
Add template classes
  Add type Fixed<N,B>
    Add fixed-point decimal and hexadecimal constants (0x0000.0001)
  Add type Complex<R>
  Add type Rational<I>
Add template functions
Compile to executable code
  Implement calling external functions
  Need to evaluate dll expression at compile time
  When interpreting, only need to compile the functions we actually call, but
   when compiling, need to compile any function which could be called.
Add statement `assembly` AssemblyStatement
Add operator  1 ::                LtR
  Or just use . instead?
    Uses:
      At start to escape to global namespace
        Maybe have an "outer" keyword here instead?
          How is an "outer" level determined given that every variable declaration creates a new scope?
            Just walk up scopes until we find another variable of the right name?
      Inner type T::U
      Static value T::u
      Static method T::u()
Add operator  2 typeid            LtR
Add const_cast, dynamic_cast, reinterpret_cast and static_cast (LtR, precedence 2)
Add operator  4 ()(type cast)     RtL
Add operator  5 .*                LtR
Add operator  5 ->*               LtR
Add operator 16 ?:                RtL
Need a better error message when statement isn't recognized as such
Make sure we have a sensible error message when no memory can be allocated at all
Add 1-bit, 2-bit, 4-bit, 128-bit, 256-bit and 512-bit types
Add "fastest at least n bit" integral and floating-point types
Add half/double/quad Word/Int/UInt types
Implement constructors and destructors
  Add operator  4 new               RtL
  Add operator  4 new[]             RtL
  Add statement `delete` ["[" "]"] Expression ";"
  Implement malloc/free
  Call destructors when leaving scope
    Need to keep track of where scopes end
Implement exceptions
  throw statement
  try/catch/finally statement
  catch block determination
    Want to catch by run-time type, not compile-time type, so need a table for each catch block and each subtype of a thrown type
  unwinding
  return ThrowStatement* from FunctionDeclaration
Floating point:
  Add Float32 and Float64 types
  Add Float16 and Float128 types
  Add type Float
  Add floating-point constants
Add arbitrary precision WordString, Integer, Unsigned and Floating types
  Add compile-time evaluation of arbitrary precision Integers and arbitrary precision constants
Add coroutines
Detect pure functions
Add statement `for` "(" Type ValueIdentifer `in` Expression ")" LoopBody
Optimization: Add a LabelledSymbol class deriving from Symbol so that Symbol doesn't need a _label member
Optimization: Shrink Symbol::_labelled if the second half is all empty to avoid pooling memory.
  To do this, need to remove elements from the list when they're at the end of the array.
Optimization: change SymbolArray to an AVL tree
Change semicolon parsing on increment/decrement/expression statements so that "for (i = 0; i < n; ++i)" is valid.
Add operator ".." which creates a Range value from two integers
  Allow a String to be indexed by a Range to yield a substring
Allow "a < b < c" (same as "a < b && b < c" but b is only evaluated once) and similar expressions

Measure stack size and allocate frames for unbounded recursive functions on heap

Allow parameters to have type Auto which creates a template function?

Have a Symbol-like type built in - the atoms are Type objects (or pointers to them)
  All objects with a vtable pointer derive from some base type (Dynamic?)
  All objects derive from Object

Need to think about what Type::toString() returns for class types
  keep track of first name assigned to type if it's defined with an alias

Optimization: If g is only ever called by f, we can do the stack correction for g at the same time we do the stack correction for f.

atomExit is not currently used

Value range propagation

The operator*() function call returns a pointer, so we need to actually dereference it to get an LValue or RValue.

adapters.txt: Allow different types for the two operands (particularly the relational ones)?

Build the static String table and String data table
  Want to make it as small as possible
    If a is a substring of b, only need to put b in the table.
    If the start of a overlaps the end of b, can put the rest of a after b.
    When two strings are identical, only need 1 entry in the String table.
  Regular expression matching algorithm?

goto statement handling in compiler
  Call destructors for any objects which leave scope
  Check that we are not skipping any constructor calls

Avoid having Span* arguments to parsing functions - return a Symbol instead.

Variadic templates
Default arguments for template parameters
Restriction of type parameters
