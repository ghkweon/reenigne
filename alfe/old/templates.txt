  Need to figure out syntax
    Does "A f<A>() { }" mean a generic function or a specialization?
  In C++ you would have:
    template<class A> A f() { }    // template
    template<> Int f<Int>() { }    // specialization
    template<class A> class B { }  // template
    template<> class B<Int> { }    // specialization
    template<template<class A> class B> class C { }  // template template
  In ALFE:

    A f<@A>() { }
    Int f<Int>() { }

    Void g<@A, @B>(A a, B b) { }
    Void g<Int, @B>(Int a, B b) { }  // partial specialization

    B<@A> = Class { }
    B<Int> = Class { }
    C<@B<A>> = Class { }       // @B is Tyco of kind <>
    C<@B<>> = Class { }        // Same as above (the parameter to @B does not need to be named here)
    C<Foo<@A>> = Class { }     // C<@D> = Class { }  where @D is of the form Foo<@A> for some @A. Note that @D is a type
    C<Foo<Int>> = Class { }    // Specialization of C with Foo<Int> as argument
    C<@B<Int>> = Class { }     // Same as C<@B<>> again? Though... perhaps this should mean that B can be instantiated with Int (ruling out "E<@F where F : String>")
    C<B> = Class { }           // specialization of a template template (since B is a template of kind <>)
    G<@H, @I> = Class { }      // Two-parameter template
    G<@H, H> = Class { }       // Specialization where both arguments must be the same Tyco
    G<@H, @J where J : H> = Class { }  // Specialization where

    How to do partial specialization for pointers?
      B<@A*> = Class { }  - so the @ prefix binds more tightly than *
      B<@A where A : Pointer> = Class { }

    B<@A<@>*>

    The "@" here makes it known that this is a parameter, not an argument (sort of like "typename" in C++).

Need a Kind system
  A Kind is either:
    Type
    A list of Kinds
  Need a function to parse a type list
  KindSpecifier := ("<" ([TycoIdentifier] [KindSpecifier]) \ ",") ">")*

Examples:
  (nothing)           = Type
  <>         <A>      = TemplateType taking a Type and returning a Type
  <<>>       <A<B>>   = TemplateType taking a <> and returning a Type
  <,<>>      <A,B<C>> = TemplateType taking a Type and a <>
  etc.

Suppose we have A<@B><@C> = Class { ... }
Then the TycoDefinitionStatement
  D = A<E>
is equivalent to
  D<@C> = A<E><C>
It's easier to understand what's going on there, but does require introducing
 otherwise unnecessary bound variables

A = Class { B<@C> = Class { ... } }
D = Class { B = Class { ... } }
E<@F> = F.B   // A TycoDefinitionStatement of unknown Kind

E<A><Int> f;
E<D> g;
E<E> h;  // Not valid - expands to E.B but E is a template and therefore has no members


A<@B> = C<D<B>>

  Get nomenclature correct
    * Type: A set of values.
    * Tyco (TypeConstructor): A generalization of a Type. Something that can (given sufficiently many Tycos of the appropriate Kinds) yield a Type.
    * Template: A non-nullary Tyco - a Tyco that can be instantiated with a Tyco to yield another Tyco.
    * TemplateType: A Type constructed from a Template.

    * Kind: The property of a Tyco which determines what you have to give it to get a Type.
    * KindSpecifier: The string which represents a Kind in a template parameter.

    * TypeSpecifier: A piece of program code that represents a Type.
    * TycoSpecifier: A piece of program code that represents a Tyco.
    * TemplateTypeSpecifier: A piece of program code that represents a TemplateType.
    * TycoIdentifier: The A in A, A<B> or A<@B<C>> - a TycoSpecifier consisting of a single captialized identifier with no operators like *, () or <>.
    * FundamentalTycoSpecifier: A sequence of letters, numbers and underscores starting with an upper case letter. A TycoSpecifier consisting of a TycoIdentifier followed by zero or more template arguments.

    * TycoSignifier: That which goes on the left of a TycoDefinitionStatement - like a TycoSpecifier but with template parameters instead of template arguments.
    * TemplateSignifier: The TycoSignifier of a TycoDefinitionStatement which defines a Template
    * TycoDefinitionStatement: A statement that defines a Tyco

    * Template parameter: The @C bit in the TemplateTypeSignifier B<@C>
    * Template argument: The C bit in B<C>
    * Specialization: Obtaining a Tyco of lower order from a Tyco of higher order
    * Full specialization: Obtaining a Type from a Tyco


Have A<@B><@C> be alternate syntax for A<@B,@C> (i.e. currying)?
  This is nice because when we can pass A<B> as a parameter to a D<@E<>> template without making a separate alias first
    Still need to create a separate alias if we wanted to do this:
      F<@B> = A<B><G>
      D<F> foo;


If we have:
  A<@B> = C<B>
  C<@B> = A<B>
Need to detect the loop and error out to avoid



Can we create a template that returns a template?

A<@B><@C> = Class { }

If you gave A a single type, it returns a template


If you want a template that takes objects of the same kind as A, you can write it as:
D<@A<><>> = Class { ... }
or
D<@A<,>> = Class { ... }





The type of f in

Foo f(Bar x) { ... }

is Foo(Bar)

which is short for Function<Foo,Bar>  (Function is a variadic template) which inherits from Function

The type of p in

Foo* p;

is Foo*

which is short for Pointer<Foo>




When defining a class or a function, we can have a set of template parameters:

Foo f<@A>(A x) { ... }
C<@A> = Class { ... }


@T is TypeParameter (no KindSpecifier, no restrictions)
@T<> is a TycoParameter that must be a Template of Kind <> (i.e. T<Int> is a type)
@T* is a TycoParameter that must be a pointer Type
Foo<@T> is a TycoParameter that must be a instance of Foo<>
Foo<@T,T> is a TycoParameter that must be an instance of Foo<> with two identical parameter types
Foo<@T,Bar<T>>
Foo<Bar<@T>,T>
@T<@U> doesn't make any sense (have @T<> and @U be separate type parameters and then instantiate T<U> directly instead - then it isn't abiguous what T means)
@T<>* doesn't make any sense
@T*<> doesn't make any sense
@T(Foo) is a TycoParameter that must be a function Type for a function taking a single Foo type parameter
Bar(@T) is a TycoParameter that must be a function Type for a function returning a value of type Bar
@T(@U) is a TycoParameter that must be a function Type for a single parameter function

So the number of template parameters can be more or less than the number of bound variables



In C++ we would have

template<class T> class Foo { ... };
template<class T> class Foo<T*> { ... };  // partial specialization for pointers

In ALFE we would have

Foo<@T> = Class { ... };
Foo<@T*> = Class { ... };
Foo<@T(@U)> = Class { ... };  // instantiate with Foo<A(B)>
Foo<@T<@U>> = Class { ... };  // instantiate with Foo<A<B>>



When specifying a template parameter, one must specify its kind




TODO: It's kind of weird that Foo<@T<@U>> and Foo<@T<U>> needs to be invoked with a Type but Foo<@T<>> needs to be invoked with a Tyco of Kind <>.
  We could instantiate as Foo<Array<>> instead of Foo<Array>
    A bit verbose and ugly, but enforces that we only ever write down types, not arbitrary type constructors
      Then we can't have our "D = A<E>;" above - we'd have to write "D<@C> = A<E><C>;"
  We could remove kind checking so that you can write Foo<@T> and then instiantiate with Foo<Array>
    We could statically assert the kind of T somehow:
      Foo<@T> = Class { Bar = Class { T<Int> t; }; }
    Instantiating types with templates is pretty rare - between rarity, documentation and static asserts, lack of kind checking should not be a big problem.
    What about making templates overloadable on kind? Make kind errors non-fatal and continue lookup? Or compute the Kind of each TycoDefinitionStatement directly?
      Foo<@T> = Class { T x; };
      Foo<@T> = Class { T<Int> x; };
    Or:
      Foo<@T> = Class { X = (isType<T>() ? T : T<Int>); X x; }
      We only need one built-in kind-variadic function isType<@T>() (plus conditional tyco expressions) to make all other kind-variadic things
    This also has the advantage that we don't need KindSpecifiers in the code at all
  We could separate the parameter identifiers from the template parameters the way that C++ does
  We could leave it like this - imagine that the KindSpecifier is there on the instantiation but is just suppressed


                      Foo<Array<>>  Foo<Array>
KindSpecifiers        yes           no

Kind of TDS known     yes           no
Kind-generics         no            yes

Overloadable on kind  yes           no

Variadic templates can't be Kind-checked anyway, so fit better with the Foo<Array> style.

The Foo<Array> style is still statically kind-checked,






What's the difference between VariadicKind and VariadicTemplateKind?
  VariadicKind is X...
  VariadicTemplateKind is TemplateKind(VariadicKind, TypeKind)

TypeKind is nullary - the kind of an actual type.
TemplateKind(A, B) is the kind of a template which yields a tyco of kind B when instantiated with a tyco of kind A.
VariadicKind(A) is the kind of a sequence of 0 or more tycos of kind X
VariadicTemplateKind is the kind of a template which accepts 0 or more tycos - i.e. the kind of Tuple - returned by Template::VariadicBody::kind()
  Should we replace VariadicKind with VariadicTemplateKind?
    Makes Kind::toString() more complicated but then all three Kind constructors are kinds of actual tyco.

A->B means a template where you supply A to get B

*->*->* means *->(*->*) means <,>
(*->*)->* means <<>>

<X> means X->*
<X, Y> means <X><Y> means X->Y->*

Suppose you have Foo<@X, @Y> = (X, Y)
  Foo<A><B> = (A, B)
  Foo<A> instantiates the leftmost argument leaving Bar<@Y>

We need a use case for $ to be able to understand it
  If <X...> means * or <X> or <X, X> or <X, X, X> etc.
  So <X...> means * or X->* or X->(X->*) or X->(X->(X->*)) etc.
  So <X...> means * or X->(<X...>)

  <$> means * or <<$>>
  So <$> means * or (<$>)->*
  So <$> means * or *->* or (*->*)->* or ((*->*)->*)->* etc.
  So (<$>)->* means *->* or *->(*->*) or (*->*)->(*->*) or ((*->*)->*)->(*->*) etc.
  So <<$>> means *->* or *->(<*>) or (*->*)->(<*>) or ((*->*)->*)->(<*>) etc.
  So <<$>> means <> or (<$>)->(<>)

  But (<$>)->* means <<$>>
  So <$> means * or <> or <<>> or <<<>>> etc.  - this was our original meaning of $ - any one-argument template kind


  So <$Y> means * or (<$Y>)->Y
  So <$Y> means * or *->Y or (*->Y)->Y or ((*->Y)->Y)->Y etc.
  So (<$Y>)->* means *->* or *->(Y->*) or (*->Y)->(Y->*) or ((*->Y)->Y)->(Y->*) etc.
  So <<$Y>> means *->* or *->(<Y>) or (*->Y)->(<Y>) or ((*->Y)->Y)->(<Y>) etc.
  So <<$Y>> means <> or (<$Y>)->(<Y>)

  (X-><Y>) is a template accepting X and yielding <Y> i.e. yielding something that accepts Y and yields type
  So (X-><Y>) is the same as X->(Y->*) which is the same as <X, Y>
  So (<$Y>)->(<Y>) is the same as <<$Y>, Y>

  So <<$Y>> means <> or <<$Y>, Y>

  So (<$Y>)->Y means *->Y or *->(Y->Y) or (*->Y)->(Y->Y) or ((*->Y)->Y)->(Y->Y) etc.

  So <$<Y>> means * or *->(<Y>) or (*->(<Y>))->(<Y>) or ((*->(<Y>))->(<Y>))->(<Y>) etc.
  So <$<Y>> means * or <,Y> or <<,Y>, Y> or <<<, Y>, Y>, Y> etc.
  So <$<Y>> means * or <<$<Y>>, Y>

  So <$<Y>> means * or <><Y> or <<><Y>><Y> or <<<><Y>><Y>><Y> etc.
  So <$<Y>> means * or <<$<Y>>><Y>

  So <$<>> means * or <,<>> or <<,<>>, <>> or <<<, <>>, <>>, <>> etc.
  So <$<>> means * or <><<>> or <<><<>>><<>> or <<<><<>>><<>>><<>> etc.

  So <$<><>> means * or <><<><>> or <<><<><>>><<><>> or <<<><<><>>><<><>>><<><>> etc.
  So <$<,>> means * or <,<,>> or <<,<,>>,<,>> or <<<,<,>>,<,>>,<,>> etc.

  So <$<<>>> means * or <><<>> or <<><<>>><<>> or <<<><<>>><<>>><<>> etc.
  So <$<<>>> means * or <,<>> or <<><<>>><<>> or <<<><<>>><<>>><<>> etc.


The unary $ isn't particularly useful, and we'd need a nullary wildkind anyway to reach all kinds without an infinite series of ... and $

Should we have a sum kind?
  No, the pattern matching of alternate template specializations accomplishes this
    In that case, we don't really need $ either - just use ... to mean sequence of arbitrary kinds

Example of a template which can be instantiated with any kinds:
  Foo<> = { base case };
  Foo<@T, ...> = { do something with T and Foo<...> };  // T is a type here because there's no kind annotation
  Foo<@T<...>, ...> = { do something with Bar<T> and Foo<...> }; // which ... does this refer to? Here T is any template, the inner ... is just a kind specifier and can't be referred to on the RHS because it's not defined by the instantiator.
  Bar<<...>> = { do something with Foo<...> };

  Foo<@T<,...>, ...> = { do something with Foo<T<Int>> and Foo<...> };
  Foo<@T<<...>, ...>, ...> = { do something with Foo<T<Array>> and Foo<...> };

Suppose we write Foo<Array>. We get the second overload which instantiates Bar<Array> and Foo.

If a template has an argument T of completely unknown kind, what can be done with that argument?
  We can't instantiate it (even partially) since we don't know the kind of it's first argument
  We can pass it to another template, but that just moves the problem around
  We can't take the arguments and pass them to another template since they are just kinds, not tycos
    The kind of tyco required to instantiate T might not even exist!
  A template can force the caller to pass appropriately-kinded tycos in the remaining arguments, then:
    Foo<@T<...>, ...> = { do something with T<...> };
    However, Foo cannot then recurse with arbitrary kinds because the 3rd argument won't necessarily be the first argument to the 2nd argument.
    Also it's hard to think of a use case for this.

Plan:
  For debugging template problems, rather than having static kind-ing on template arguments, have hypertext error messages:
    Error: cannot instantiate template Tuple with argument Array as it is of the incorrect kind (kind of argument to Tuple is type, kind of Array is <>). _why_
      _why_ leads to: Tuple instantiates argument T.
    Default assumption is that template is correct and the error is in the instantiator as templates are instantiated on average more than once.
  Rewrite variadic kind blog post

Done:
  Get rid of WildKind and allow variadic kinds to be arbitrary
  Get rid of VariadicKind and replace with VariadicTemplateKind, a nullary kind constructor



Suppose we have a template that takes a variadic template as an argument:
  Foo<@T<...>> = { ... };
  Does that mean that Foo must be instantiated with a variadic template, or that it can be instantiated with any template?
    The former probably makes more sense

We want to have some generic code (in Template) for dealing with instantiations and partially instantiated templates
  Template::Body knows about ArrayType (via ArrayTemplate::Body)
  Template::PartiallyInstantiatedBody needs to know about ArrayType

Should we put our instantiations cache in Tyco or in Template and Tuple?
  In Tyco would add 3 words to every Type::Body - quite a lot. Let's try putting it in Tyco and Template first.
    Or should TupleTyco inherit from Template and just add its own type-stuff?


Is T the same type as (T)?
  We'd like the two to act the same in every way with the possible exception of instantiation:
    T<Int> should be illegal since T is a type but
    (T)<Int> should be a synonym for Tuple<T><Int> which is Tuple<T, Int> which is (T, Int).
    The kind of T is Type but the kind of (T) is VariadicTemplateKind
      Does that mean that Foo<T> and Foo<(T)> are different?
        And for that matter can we pass a tyco of kind VariadicTemplateKind to a template expecting a type?
          Yes. So what about passing a tyco of kind VariadicTemplateKind to a template expecting a <>, say?
            Since VariadicTemplateKind can be instantiated with anything, it's valid to use one as an argument to any template
        From the perspective of the type system, T and (T) are identical, they just differ in the kind system


Tyco hashes:
  5 = Template::PartialBody
  3 = ArrayType::Body
  4 = SequenceType::Body
  6 = TupleTyco::NonUnitImpBody
  1 = PointerType::Body
  2 = FunctionType::Body
  7 = LessThanType::Body



Should the elements of a tuple be addressable, e.g. via []?
  [] really implies homogeneous containers - "." is used for heterogeneous
  The obvious would be first, second, third, etc... but we don't want to hard-code those
  C# uses Item1, Item2, ...
  Better to use lvalue tuples to avoid the necessity of having to name the elements
  There's no reason why we shouldn't use 0, 1, 2, 3, ... on the right side of . and -> - terse, easy to remember and unsurprising
    Slightly confusing in that a=1, foo.a doesn't do foo.1 but that's ok - if you want an array, use one.
    has() is for . and -> so we do want to implement has().



