""  Double-quoted string
### Embedded literal
0   Integer
abc Identifer
      true
      false
      null
()  Parentheses
{}  Array Literal


    ::                LtR

    ++(postfix)       LtR  remove
    --(postfix)       LtR  remove
    ()(function call) LtR  done                    n/a
    []                LtR  todo
    .                 LtR  todo
    ->                LtR  todo
    typeid            LtR
    const_cast        LtR
    dynamic_cast      LtR
    reinterpret_cast  LtR
    static_cast       LtR

                      RtL  reserved for power: ^   overloadable

    ++(prefix)        RtL  statement
    --(prefix)        RtL  statement
    +(unary)          RtL  todo                    overloadable
    -(unary)          RtL  todo                    overloadable
    !                 RtL  todo                    overloadable
    ~                 RtL  todo                    overloadable
    ()(type cast)     RtL
    *(indirection)    RtL  todo                    overloadable
    &(address of)     RtL  todo                    overloadable
    sizeof            RtL  todo
    new               RtL
    new[]             RtL
    delete            RtL
    delete[]          RtL

    .*                LtR
    ->*               LtR

    *                 LtR  todo                    overloadable
    /                 LtR  todo                    overloadable
    %                 LtR  todo                    overloadable

    +                 LtR  done                    overloadable
    -                 LtR  done                    overloadable

    <<                LtR  todo                    overloadable
    >>                LtR  todo                    overloadable

    <                 LtR  todo                    overloadable
    <=                LtR  todo                    overloadable
    >                 LtR  todo                    overloadable
    >=                LtR  todo                    overloadable

    ==                LtR  todo                    overloadable
    !=                LtR  todo                    overloadable

    &                 LtR  todo                    overloadable

    ^                 LtR  todo (rename to ~)      overloadable

    |                 LtR  todo                    overloadable

    &&                LtR  todo                    not overloadable

    ||                LtR  todo                    not overloadable

    ?:                RtL

    =                 RtL  statement
    +=                RtL  statement
    -=                RtL  statement
    *=                RtL  statement
    /=                RtL  statement
    %=                RtL  statement
    <<=               RtL  statement
    >>=               RtL  statement
    &=                RtL  statement
    ^=                RtL  statement
    |=                RtL  statement

    throw             RtL  statement

    ,                 LtR

-y^2 should be -(y^2), not (-y)^2, so ^ needs to bind more tightly than unary-
x^y^z should be x^(y^z) not (x^y)^z == x^(y*z) so ^ needs to associate right-to-left
x.y^2 should be (x.y)^2 not x.(y^2) so ^ needs to bind less tightly than .

a ? b ? c : d : e can only mean a ? (b ? c : d) : e
a ? b : c ? d : e means a ? b : (c ? d : e) not (a ? b : c) ? d : e

//  \ ("*" | "/" | "%")
//  \ ("+" | "-")
//  \ ("<<" | ">>")
//  \ ("<" | ">" | "<=" | ">=")
//  \ ("==" | "!=")
//  \ "&"
//  \ "~"
//  \ "|"
//  \ "&&"
//  \ "||" ["?" Expression ":" Expression];





Ultimately the compiler does need to have some built-in functionality such as operator+(Int,Int)
  Those are expressed as function calls that aren't defined like normal functions, but are called in the instruction semantics blocks (just the same way that they are called anywhere else)
  So they're defined by pattern matching
  Then there is no need for _emit, for irreducible adapter functions for these operators, or for Compiler.*, and the front end is regular

How do we define + in the interpreter?
  Make a way of defining functions in the interpreter


&& and || can't be defined as function calls because function calls are always evaluated strictly and && and || are lazy
  Same with ?: if I implement it

~ is overrideable and is a generic (bitwise) NOT. It is defined for Boolean and integer types.
! is not overrideable and is only defined for Boolean.
  The main purpose of using ! instead of ~ is a hint to the compiler "this should be a Boolean"
    Though we should get that anyway since Boolean isn't convertable
